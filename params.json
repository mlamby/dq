{"name":"Dq","tagline":"Simple Python Data Queries","body":"dq.py - Python DataQuery\r\n=========================\r\nProvides the ability to query a data source made up of any combination\r\nof lists and dicts.\r\n\r\nTo use from within Python:\r\n```python\r\n>>> from dq import query\r\n>>> dq.query('[0].name', [{'name': 'michael'}, {'name': 'jane'}])\r\n'michael' \r\n\r\n>>> dq.query('..name', [{'name': 'michael'}, {'name': 'jane'}])\r\n['michael', 'jane']\r\n```\r\nInstallation\r\n------------\r\nTo install dq:\r\n```\r\npip install dq\r\n```\r\ndq does not depend on any non-standard libraries\r\n\r\nQuery Language\r\n--------------\r\nThe query language is a much simplified version of [json path][1]. The subset\r\nis selected to allow for simple structural querying of data - no filters or \r\nexpressions. This keeps the parser nice and simple, and since its a Python\r\nlibrary you have the full power of Python to perform complex filters.\r\n\r\nThe query language supports the following path syntax:\r\n```\r\n.key - Returns the given key from the dict\r\n..key - Returns the given key from any descendant dictionary \r\n[index] - Returns an item from a list at the specified index\r\n[*] - Returns all items in a list\r\n[start:stop:step] - Performs a python slice operation on a list\r\n```\r\n\r\nQuery Examples\r\n--------------\r\nThese syntax items can be combined to build complex queries.\r\n```python\r\n>>> from dq import query\r\n>>> d = {}\r\n>>> d['one'] = 1\r\n>>> d['two'] = [1,2,3,4,5,6,7,8,9,10]\r\n>>> d['three'] = [{'name': 'john'}, {'name': 'mary'}, {'one': 'guy'}]\r\n\r\n>>> query('.one', d)\r\n1\r\n\r\n>>> query('.two', d)\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n>>> query('.two[1]', d)\r\n2\r\n\r\n>>> query('.two[*]', d)\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n>>> query('.two[2:-2]', d)\r\n[3, 4, 5, 6, 7, 8]\r\n\r\n>>> query('.two[1:6:2]', d)\r\n[2, 4, 6]\r\n\r\n>>> query('.three[1].name', d)\r\n'mary'\r\n\r\n>>> query('.three[*].name', d)\r\n['john', 'mary']\r\n\r\n>>> query('..name', d)\r\n['john', 'mary']\r\n\r\n>>> query('..one', d)\r\n[1, 'guy']\r\n```\r\n\r\nCompiled Queries\r\n----------------\r\nWhen using the same query string repeatedly a CompiledQuery can be constructed\r\nto prevent parsing the query string multiple times:\r\n```python\r\n>>> from dq import compiled\r\n>>> query = compiled('[1]')\r\n>>> query([1,2,3,4])\r\n2\r\n>>> query([5,6,7,8])\r\n6\r\n```\r\n\r\nThanks\r\n-------\r\nThis library is based on the ideas and code from [python-jsonpath-rw][2].\r\n\r\nCopyright\r\n---------\r\nCopyright (c) 2013 Michael Lamb. See LICENSE.txt for details.\r\n\r\n[1]: http://goessner.net/articles/JsonPath/ \"Json Path\"\r\n[2]: https://github.com/kennknowles/python-jsonpath-rw \"python-jsonpath-rw\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}